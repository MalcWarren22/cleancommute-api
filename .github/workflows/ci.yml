      - name: Smoke test with Flask test client
        env:
          # App config for test run
          API_KEY: "ci-key"
          ALLOW_CLEAR: "1"
          MONGO_URI: "mongodb://localhost:27017"
          MONGO_DB: "cleancommute_ci"
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python - <<'PY'
          # CleanCommute API smoke aligned to current app.py behavior
          import os, json, importlib

          # Ensure env visible to Flask app factory
          os.environ.setdefault("API_KEY", os.getenv("API_KEY","ci-key"))
          os.environ.setdefault("ALLOW_CLEAR", os.getenv("ALLOW_CLEAR","1"))
          os.environ.setdefault("MONGO_URI", os.getenv("MONGO_URI","mongodb://localhost:27017"))
          os.environ.setdefault("MONGO_DB", os.getenv("MONGO_DB","cleancommute_ci"))

          # Import your Flask app; adjust if your module is named differently
          try:
              from app import app
          except Exception as e:
              raise AssertionError(f"Couldn't import 'app'. If your file is in a package, set PYTHONPATH or change import. Error: {e}")

          c = app.test_client()

          def J(resp):
              try:
                  return json.loads(resp.data.decode("utf-8"))
              except Exception:
                  raise AssertionError(f"Non-JSON response: {resp.status_code} {resp.data[:120]!r}")

          # 1) Health
          r = c.get("/api/v1/health")
          assert r.status_code == 200, f"/health {r.status_code}"
          assert J(r).get("ok") is True

          # 2) DB ping — allow 200 or 500 but must be JSON
          r = c.get("/api/v1/db-ping")
          assert r.status_code in (200, 500), f"/db-ping {r.status_code}"
          _ = J(r)

          # 3) GET samples
          r = c.get("/api/v1/samples")
          assert r.status_code == 200, f"/samples GET {r.status_code}"
          body = J(r)
          assert isinstance(body.get("data"), list), f"/samples GET shape: {body}"

          # 4) POST samples without key -> 401
          r = c.post("/api/v1/samples", json={"name": "CI"})
          assert r.status_code == 401, f"/samples POST no key expected 401, got {r.status_code}"
          assert r.headers.get("WWW-Authenticate","").startswith("API-Key")

          # 5) POST samples with key -> 201 & _id is str
          r = c.post("/api/v1/samples", json={"name": "CI"}, headers={"x-api-key": os.environ["API_KEY"]})
          assert r.status_code == 201, f"/samples POST with key {r.status_code}"
          data = J(r).get("data", {})
          assert isinstance(data.get("_id"), str) and data["_id"]

          # 6) Commutes create -> 201
          r = c.post("/api/v1/commutes",
                     json={"origin":"A","destination":"B","mode":"driving"},
                     headers={"x-api-key": os.environ["API_KEY"]})
          assert r.status_code == 201, f"/commutes POST {r.status_code}"
          commute_id = J(r)["data"]["_id"]
          assert isinstance(commute_id, str)

          # 7) Commutes list -> 200, list in data
          r = c.get("/api/v1/commutes")
          assert r.status_code == 200, f"/commutes GET {r.status_code}"
          items = J(r).get("data", [])
          assert isinstance(items, list), f"/commutes GET shape: {items!r}"

          # 8) Clear endpoints (enabled in CI via ALLOW_CLEAR=1)
          r = c.post("/api/v1/commutes/clear", headers={"x-api-key": os.environ["API_KEY"]})
          assert r.status_code == 200, f"/commutes/clear {r.status_code}"
          r = c.post("/api/v1/samples/clear", headers={"x-api-key": os.environ["API_KEY"]})
          assert r.status_code == 200, f"/samples/clear {r.status_code}"

          print("✅ Smoke OK")
          PY
