name: ci

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  smoke:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps (+ dev tools)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff black pip-audit

      - name: Compile sources (fast syntax check)
        run: python -m py_compile *.py

      - name: Wait for Mongo to be reachable
        run: |
          python - <<'PY'
          import time, sys
          from pymongo import MongoClient
          for _ in range(60):
              try:
                  MongoClient("mongodb://localhost:27017", serverSelectionTimeoutMS=1000).admin.command("ping")
                  print("Mongo is up")
                  sys.exit(0)
              except Exception:
                  time.sleep(1)
          print("Mongo did not come up", file=sys.stderr)
          sys.exit(1)
          PY

      - name: Smoke test with Flask test client
        env:
          # App config for test run
          DISABLE_HTTPS_REDIRECT: "1"
          API_KEY: "ci-key"
          ALLOW_CLEAR: "1"
          MONGO_URI: "mongodb://localhost:27017/cleancommute"
        run: |
          python - <<'PY'
          import os, json
          from app import app

          c = app.test_client()

          def expect(status, resp):
              assert resp.status_code == status, f"Unexpected: {resp.status_code} {resp.data[:80]!r}"

          # Health & DB
          expect(200, c.get("/api/v1/health"))
          expect(200, c.get("/api/v1/db-ping"))

          # Unauthorized POST blocked
          r = c.post("/api/v1/commutes", json={"distance_km": 1, "mode": "car"})
          assert r.status_code == 401, f"Expected 401, got {r.status_code}"

          # Authorized happy path
          headers = {"x-api-key": os.environ["API_KEY"]}
          r = c.post("/api/v1/commutes", headers=headers,
                     json={"distance_km": 2.5, "mode": "car", "origin": "CI", "destination": "Check"})
          expect(201, r)

          # List shows at least 1
          r = c.get("/api/v1/commutes?limit=1")
          expect(200, r)
          data = r.get_json()
          assert isinstance(data, list) and len(data) >= 1

          # Samples create/list/clear
          r = c.post("/api/v1/samples", headers=headers, json={"name": "CI", "status": "ok"})
          expect(201, r)
          r = c.get("/api/v1/samples?limit=1")
          expect(200, r)
          assert isinstance(r.get_json(), list)

          # Clear endpoints (enabled in CI)
          r = c.post("/api/v1/commutes/clear", headers=headers)
          expect(200, r)
          r = c.post("/api/v1/samples/clear", headers=headers)
          expect(200, r)
          print("smoke ok")
          PY

      - name: Style (ruff + black --check)
        run: |
          ruff check .
          black --check .

      - name: Vulnerability scan (pip-audit; non-blocking)
        run: pip-audit -r requirements.txt || true
