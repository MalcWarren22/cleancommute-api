name: ci

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  smoke:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok'"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps (+ dev tools)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # dev tools
          pip install ruff black pip-audit

      - name: Compile sources (fast syntax check)
        run: python -m py_compile *.py || true

      - name: Wait for Mongo to be reachable
        run: |
          python - <<'PY'
          import time, sys
          from pymongo import MongoClient
          for _ in range(60):
              try:
                  MongoClient("mongodb://localhost:27017", serverSelectionTimeoutMS=1000).admin.command("ping")
                  print("Mongo is up")
                  sys.exit(0)
              except Exception:
                  time.sleep(1)
          print("Mongo did not come up", file=sys.stderr)
          sys.exit(1)
          PY

      - name: Smoke test with Flask test client
        env:
          API_KEY: "ci-key"
          ALLOW_CLEAR: "1"
          MONGO_URI: "mongodb://localhost:27017"
          MONGO_DB: "cleancommute_ci"
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python - <<'PY'
          import os, json

          # Ensure env visible to Flask app
          os.environ.setdefault("API_KEY", os.getenv("API_KEY","ci-key"))
          os.environ.setdefault("ALLOW_CLEAR", os.getenv("ALLOW_CLEAR","1"))
          os.environ.setdefault("MONGO_URI", os.getenv("MONGO_URI","mongodb://localhost:27017"))
          os.environ.setdefault("MONGO_DB", os.getenv("MONGO_DB","cleancommute_ci"))

          # Import your Flask app (root app.py). If your path is different, change this import.
          try:
              from app import app
          except Exception as e:
              raise AssertionError(f"Import failed (expected from app import app): {e}")

          c = app.test_client()

          def J(resp):
              try:
                  return json.loads(resp.data.decode("utf-8"))
              except Exception:
                  raise AssertionError(f"Non-JSON response: {resp.status_code} {resp.data[:200]!r}")

          def as_list(payload):
              """Accept both {'data': [...]} and raw list responses."""
              if isinstance(payload, list):
                  return payload
              if isinstance(payload, dict) and "data" in payload and isinstance(payload["data"], list):
                  return payload["data"]
              raise AssertionError(f"Expected list or {{'data': list}}, got: {payload!r}")

          # 1) Health
          r = c.get("/api/v1/health")
          body = J(r)
          assert r.status_code == 200 and (body.get("ok") in (True, 1)), f"/health -> {r.status_code} {body}"

          # 2) DB ping (allow 200/500 but require JSON)
          r = c.get("/api/v1/db-ping")
          _ = J(r)
          assert r.status_code in (200, 500), f"/db-ping -> {r.status_code}"

          # 3) GET samples (accept both shapes)
          r = c.get("/api/v1/samples")
          samples = as_list(J(r))
          assert r.status_code == 200 and isinstance(samples, list), f"/samples GET -> {r.status_code} {samples!r}"

          # 4) POST samples without key -> 401
          r = c.post("/api/v1/samples", json={"name":"CI"})
          assert r.status_code == 401, f"/samples POST no key -> {r.status_code} {r.data[:120]!r}"
          assert r.headers.get("WWW-Authenticate","").startswith("API-Key")

          # 5) POST samples with key -> 201 & _id is str
          r = c.post("/api/v1/samples",
                     json={"name":"CI"},
                     headers={"x-api-key": os.environ["API_KEY"]})
          body = J(r)
          assert r.status_code == 201, f"/samples POST key -> {r.status_code} {body!r}"
          _id = body["data"]["_id"] if isinstance(body, dict) and "data" in body else body["_id"]
          assert isinstance(_id, str) and _id, f"_id must be string, got: {_id!r}"

          # 6) Commutes create -> 201
          r = c.post("/api/v1/commutes",
                     json={"origin":"A","destination":"B","mode":"driving"},
                     headers={"x-api-key": os.environ["API_KEY"]})
          body = J(r)
          assert r.status_code == 201, f"/commutes POST -> {r.status_code} {body!r}"
          _id = body["data"]["_id"] if isinstance(body, dict) and "data" in body else body["_id"]
          assert isinstance(_id, str) and _id

          # 7) Commutes list -> accept both shapes
          r = c.get("/api/v1/commutes")
          items = as_list(J(r))
          assert r.status_code == 200 and isinstance(items, list), f"/commutes GET -> {r.status_code} {items!r}"

          # 8) Clear endpoints (enabled in CI)
          r = c.post("/api/v1/commutes/clear", headers={"x-api-key": os.environ["API_KEY"]})
          assert r.status_code == 200, f"/commutes/clear -> {r.status_code} {r.data[:120]!r}"
          r = c.post("/api/v1/samples/clear", headers={"x-api-key": os.environ["API_KEY"]})
          assert r.status_code == 200, f"/samples/clear -> {r.status_code} {r.data[:120]!r}"

          print("âœ… Smoke OK")
          PY

      - name: Style (ruff + black --check)
        run: |
          ruff check .
          black --check .

      - name: Vulnerability scan (pip-audit; non-blocking)
        run: pip-audit -r requirements.txt || true
