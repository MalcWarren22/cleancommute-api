name: ci

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  smoke:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok'"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps (+ dev tools)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff black pip-audit

      - name: Compile sources (fast syntax check)
        run: python -m py_compile *.py

      - name: Wait for Mongo to be reachable
        run: |
          python - <<'PY'
          import time, sys
          from pymongo import MongoClient
          for _ in range(60):
              try:
                  MongoClient("mongodb://localhost:27017", serverSelectionTimeoutMS=1000).admin.command("ping")
                  print("Mongo is up")
                  sys.exit(0)
              except Exception:
                  time.sleep(1)
          print("Mongo did not come up", file=sys.stderr)
          sys.exit(1)
          PY

      # >>> Option A smoke step (updated) <<<
      - name: Smoke test with Flask test client
        env:
          API_KEY: "ci-key"
          ALLOW_CLEAR: "1"
          MONGO_URI: "mongodb://localhost:27017"
          MONGO_DB: "cleancommute_ci"
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python - <<'PY'
          import os, json
          os.environ.setdefault("API_KEY", os.getenv("API_KEY","ci-key"))
          os.environ.setdefault("ALLOW_CLEAR", os.getenv("ALLOW_CLEAR","1"))
          os.environ.setdefault("MONGO_URI", os.getenv("MONGO_URI","mongodb://localhost:27017"))
          os.environ.setdefault("MONGO_DB", os.getenv("MONGO_DB","cleancommute_ci"))

          try:
              from app import app
          except Exception as e:
              raise AssertionError(f"Couldn't import 'app': {e}")

          c = app.test_client()

          def J(resp):
              try:
                  return json.loads(resp.data.decode("utf-8"))
              except Exception:
                  raise AssertionError(f"Non-JSON response: {resp.status_code} {resp.data[:120]!r}")

          r = c.get("/api/v1/health"); assert r.status_code==200 and J(r).get("ok") is True
          r = c.get("/api/v1/db-ping"); assert r.status_code in (200,500); _ = J(r)

          r = c.get("/api/v1/samples"); assert r.status_code==200; assert isinstance(J(r).get("data"), list)

          r = c.post("/api/v1/samples", json={"name":"CI"})
          assert r.status_code==401 and r.headers.get("WWW-Authenticate","").startswith("API-Key")

          r = c.post("/api/v1/samples", json={"name":"CI"}, headers={"x-api-key": os.environ["API_KEY"]})
          assert r.status_code==201 and isinstance(J(r)["data"]["_id"], str)

          r = c.post("/api/v1/commutes",
                     json={"origin":"A","destination":"B","mode":"driving"},
                     headers={"x-api-key": os.environ["API_KEY"]})
          assert r.status_code==201 and isinstance(J(r)["data"]["_id"], str)

          r = c.get("/api/v1/commutes")
          assert r.status_code==200 and isinstance(J(r).get("data"), list)

          r = c.post("/api/v1/commutes/clear", headers={"x-api-key": os.environ["API_KEY"]}); assert r.status_code==200
          r = c.post("/api/v1/samples/clear", headers={"x-api-key": os.environ["API_KEY"]}); assert r.status_code==200
          print("âœ… Smoke OK")
          PY

      - name: Style (ruff + black --check)
        run: |
          ruff check .
          black --check .

      - name: Vulnerability scan (pip-audit; non-blocking)
        run: pip-audit -r requirements.txt || true
