name: ci

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  smoke:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok'"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=30

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff black pip-audit

      - name: Fast syntax check
        run: python -m py_compile *.py || true

      - name: Wait for Mongo
        run: |
          python - <<'PY'
          import time, sys
          from pymongo import MongoClient
          for _ in range(90):
              try:
                  MongoClient("mongodb://localhost:27017", serverSelectionTimeoutMS=1000).admin.command("ping")
                  print("Mongo is up")
                  sys.exit(0)
              except Exception:
                  time.sleep(1)
          print("Mongo did not come up", file=sys.stderr)
          sys.exit(1)
          PY

      - name: Smoke test with Flask test client
        env:
          # Use the service hostname "mongo". Include DB name in the URI.
          MONGO_URI: "mongodb://mongo:27017/cleancommute_ci"
          MONGO_DB: "cleancommute_ci"
          API_KEY: "ci-key"
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python - <<'PY'
          import json, os
          os.environ.setdefault("MONGO_URI", "mongodb://mongo:27017/cleancommute_ci")
          os.environ.setdefault("MONGO_DB", "cleancommute_ci")
          os.environ.setdefault("API_KEY", "ci-key")

          from app import app
          c = app.test_client()

          def J(resp): return json.loads(resp.data.decode("utf-8"))

          # Health
          r = c.get("/api/v1/health"); assert r.status_code == 200, r.status_code
          assert J(r).get("status") == "ok"

          # DB ping (200 true)
          r = c.get("/api/v1/db-ping"); assert r.status_code == 200, r.status_code
          assert J(r).get("ok") is True

          # Write sample (requires x-api-key)
          r = c.post("/api/v1/samples",
                     json={"hello": "atlas"},
                     headers={"x-api-key": "ci-key"})
          assert r.status_code == 201, (r.status_code, r.data)

          # List samples
          r = c.get("/api/v1/samples"); assert r.status_code == 200
          assert isinstance(J(r), list)

          print("✅ Smoke OK")
          PY

      - name: Style (ruff + black)
        run: |
          ruff check .
          black --check . || (echo "Autoformatting with Black"; black .)

      - name: Vulnerability scan (non-blocking)
        run: pip-audit -r requirements.txt || true

  deploy_staging:
    name: Deploy to Heroku (staging)
    runs-on: ubuntu-latest
    needs: smoke
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/checkout@v4

      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      - name: Push to Heroku (staging)
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          APP: ${{ vars.HEROKU_APP_STAGING }}
        run: |
          git push https://heroku:${HEROKU_API_KEY}@git.heroku.com/${APP}.git HEAD:main

      - name: Health check (staging)
        env:
          APP: ${{ vars.HEROKU_APP_STAGING }}
        run: |
          set -e
          BASE=$(heroku apps:info -a "$APP" | sed -n 's/^Web URL: *//p'); BASE=${BASE%/}
          URL="${BASE}/api/v1/health"
          echo "Checking $URL"
          for i in {1..45}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            if [ "$code" = "200" ]; then echo "Healthy ✅"; exit 0; fi
            sleep 2
          done
          echo "Health check failed ❌ at $URL"; exit 1

  deploy_prod:
    name: Deploy to Heroku (production)
    runs-on: ubuntu-latest
    needs: smoke
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      - name: Push to Heroku (prod)
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          APP: ${{ vars.HEROKU_APP_PROD }}
        run: |
          git push https://heroku:${HEROKU_API_KEY}@git.heroku.com/${APP}.git HEAD:main

      - name: Health check (prod)
        env:
          APP: ${{ vars.HEROKU_APP_PROD }}
        run: |
          set -e
          BASE=$(heroku apps:info -a "$APP" | sed -n 's/^Web URL: *//p'); BASE=${BASE%/}
          URL="${BASE}/api/v1/health"
          echo "Checking $URL"
          for i in {1..45}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            if [ "$code" = "200" ]; then echo "Healthy ✅"; exit 0; fi
            sleep 2
          done
          echo "Health check failed ❌ at $URL"; exit 1
