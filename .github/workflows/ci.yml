name: ci
on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  smoke:
    runs-on: ubuntu-latest

    # Spin up a MongoDB service the app can connect to
    services:
      mongo:
        image: mongo:6
        ports: ["27017:27017"]
        # Wait until Mongo answers ping
        options: >-
          --health-cmd "mongosh --quiet --eval 'db.adminCommand({ ping: 1 })'"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 20

    env:
      # App env for tests (no secrets required)
      MONGO_URI: mongodb://localhost:27017/cleancommute
      API_KEY: ci-test-key-123
      ALLOW_CLEAR: "1"
      FRONTEND_ORIGIN: http://localhost:3000
      DEFAULT_LIMITS: 100 per minute

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install deps (+dev tools)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest ruff black pip-audit

      - name: Compile sources (fast syntax check)
        run: python -m py_compile app.py emissions.py

      - name: Wait for Mongo to be reachable
        run: |
          python - <<'PY'
          import time, os, sys
          from pymongo import MongoClient
          uri = os.environ["MONGO_URI"]
          for i in range(30):
            try:
              MongoClient(uri, serverSelectionTimeoutMS=1000).admin.command("ping")
              print("Mongo is ready"); sys.exit(0)
            except Exception as e:
              print("waiting for mongo...", e); time.sleep(1)
          sys.exit("Mongo never became ready")
          PY

      - name: Smoke test with Flask test client
        run: |
          python - <<'PY'
          import os, json
          from app import app, db
          client = app.test_client()
          assert client.get("/api/v1/health").status_code == 200
          assert client.get("/api/v1/db-ping").status_code == 200

          # unauthorized -> 401
          r = client.post("/api/v1/commutes", json={"distance_km":1, "mode":"car"})
          assert r.status_code == 401, r.data

          # authorized create -> 201
          hdr = {"x-api-key": os.environ["API_KEY"]}
          r = client.post("/api/v1/commutes", headers=hdr,
                          json={"distance_km": 2.5, "mode":"car", "origin":"A", "destination":"B"})
          assert r.status_code == 201, r.data

          # list -> includes one record
          r = client.get("/api/v1/commutes?limit=5")
          assert r.status_code == 200 and len(r.get_json()) >= 1
          print("SMOKE OK")
          PY

      - name: Style (ruff + black --check)
        run: |
          ruff check .
          black --check .

      - name: Vulnerability scan (advisory)
        continue-on-error: true    # donâ€™t fail the build on advisories yet
        run: pip-audit -r requirements.txt
