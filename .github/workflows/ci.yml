name: ci

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  smoke:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok'"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps (+ dev tools)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff black pip-audit

      - name: Compile sources (fast syntax check)
        run: python -m py_compile *.py || true

      - name: Wait for Mongo to be reachable
        run: |
          python - <<'PY'
          import time, sys
          from pymongo import MongoClient
          for _ in range(60):
              try:
                  MongoClient("mongodb://localhost:27017", serverSelectionTimeoutMS=1000).admin.command("ping")
                  print("Mongo is up")
                  sys.exit(0)
              except Exception:
                  time.sleep(1)
          print("Mongo did not come up", file=sys.stderr)
          sys.exit(1)
          PY

      - name: Smoke test with Flask test client
        env:
          API_KEY: "ci-key"
          ALLOW_CLEAR: "true"
          MONGO_URI: "mongodb://localhost:27017"
          MONGO_DB: "cleancommute_ci"
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python - <<'PY'
          import os, json
          os.environ.setdefault("API_KEY", os.getenv("API_KEY","ci-key"))
          os.environ.setdefault("ALLOW_CLEAR", os.getenv("ALLOW_CLEAR","true"))
          os.environ.setdefault("MONGO_URI", os.getenv("MONGO_URI","mongodb://localhost:27017"))
          os.environ.setdefault("MONGO_DB", os.getenv("MONGO_DB","cleancommute_ci"))
          from app import app

          c = app.test_client()
          def J(r):
              return json.loads(r.data.decode("utf-8"))
          def as_list(p):
              if isinstance(p, list): return p
              if isinstance(p, dict) and isinstance(p.get("data"), list): return p["data"]
              raise AssertionError(f"Expected list or {{'data': list}}, got: {p!r}")

          r = c.get("/api/v1/health"); assert r.status_code==200
          r = c.get("/api/v1/db-ping"); assert r.status_code in (200,500)

          r = c.get("/api/v1/samples"); _ = as_list(J(r)); assert r.status_code==200

          r = c.post("/api/v1/samples", json={"name":"CI"}); assert r.status_code==401

          r = c.post("/api/v1/samples", json={"name":"CI"}, headers={"x-api-key": os.environ["API_KEY"]})
          assert r.status_code==201

          r = c.post("/api/v1/commutes", json={"origin":"A","destination":"B"}, headers={"x-api-key": os.environ["API_KEY"]})
          assert r.status_code==201

          r = c.get("/api/v1/commutes"); _ = as_list(J(r)); assert r.status_code==200

          r = c.post("/api/v1/commutes/clear", headers={"x-api-key": os.environ["API_KEY"]}); assert r.status_code==200
          r = c.post("/api/v1/samples/clear", headers={"x-api-key": os.environ["API_KEY"]}); assert r.status_code==200
          print("✅ Smoke OK")
          PY

      - name: Style (ruff + black autoformat)
        run: |
          ruff check .
          black .
          echo "✅ Style checks passed (Black autoformatted if needed)."

      - name: Vulnerability scan (pip-audit; non-blocking)
        run: pip-audit -r requirements.txt || true

  deploy_staging:
    name: Deploy to Heroku (staging)
    runs-on: ubuntu-latest
    needs: smoke
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/checkout@v4

      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      - name: Authenticate Heroku
        run: echo "${{ secrets.HEROKU_API_KEY }}" | heroku auth:token

      - name: Push code to Heroku (staging)
        run: git push https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/${{ vars.HEROKU_APP_STAGING }}.git HEAD:main

      - name: Health check (staging)
        env:
          HEROKU_APP: ${{ vars.HEROKU_APP_STAGING }}
        run: |
          set -e
          BASE=$(heroku apps:info -a "$HEROKU_APP" | sed -n 's/^Web URL: *//p')
          BASE=${BASE%/}
          URL="${BASE}/api/v1/health"
          echo "Checking $URL"
          for i in {1..45}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            if [ "$code" = "200" ]; then echo "Healthy ✅"; exit 0; fi
            sleep 2
          done
          echo "Health check failed ❌ (last code: $code) at $URL"; exit 1

  deploy_prod:
    name: Deploy to Heroku (production)
    runs-on: ubuntu-latest
    needs: smoke
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      - name: Authenticate Heroku
        run: echo "${{ secrets.HEROKU_API_KEY }}" | heroku auth:token

      - name: Push code to Heroku (prod)
        run: git push https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/${{ vars.HEROKU_APP_PROD }}.git HEAD:main

      - name: Health check (prod)
        env:
          HEROKU_APP: ${{ vars.HEROKU_APP_PROD }}
        run: |
          set -e
          BASE=$(heroku apps:info -a "$HEROKU_APP" | sed -n 's/^Web URL: *//p')
          BASE=${BASE%/}
          URL="${BASE}/api/v1/health"
          echo "Checking $URL"
          for i in {1..45}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            if [ "$code" = "200" ]; then echo "Healthy ✅"; exit 0; fi
            sleep 2
          done
          echo "Health check failed ❌ (last code: $code) at $URL"; exit 1
